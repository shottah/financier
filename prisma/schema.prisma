// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  clerkId         String    @unique
  email           String    @unique
  firstName       String?
  lastName        String?
  imageUrl        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  cards           Card[]
  merchants       Merchant[]
  notifications   Notification[]
}

model Card {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  type        String
  lastFour    String?
  color       String      @default("#3B82F6")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  statements  Statement[]
}

model Statement {
  id               String      @id @default(cuid())
  cardId           String
  card             Card        @relation(fields: [cardId], references: [id], onDelete: Cascade)
  fileName         String
  filePath         String      // Stores blob URL or local path for backwards compatibility
  blobUrl          String?     // Explicit blob URL field for future use
  fileSize         Int?        // File size in bytes
  mimeType         String?     @default("application/pdf")
  uploadDate       DateTime    @default(now())
  statementDate    DateTime?
  year             Int?
  month            Int?
  startBalance     Float?
  endBalance       Float?
  totalDebit       Float?
  totalCredit      Float?
  extractedData    String?     // JSON string for flexible data storage
  status           String      @default("UPLOADED")
  transactions     Transaction[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  @@index([cardId, statementDate])
  @@index([status])
}

model Merchant {
  id           String        @id @default(cuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String        // Display name (can be updated by user)
  billingName  String        // Original name from transaction data
  category     String?       // Primary category for this merchant
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  
  @@unique([userId, billingName]) // Ensure unique billing name per user
  @@index([userId, name])
}

model Transaction {
  id          String      @id @default(cuid())
  statementId String
  statement   Statement   @relation(fields: [statementId], references: [id], onDelete: Cascade)
  merchantId  String?
  merchant    Merchant?   @relation(fields: [merchantId], references: [id], onDelete: SetNull)
  date        DateTime
  description String      // Keep for backwards compatibility and raw data
  amount      Float
  type        String
  category    String?     // Transaction-level category (can override merchant category)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([merchantId])
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String    // 'success', 'error', 'info'
  title       String
  description String
  read        Boolean   @default(false)
  metadata    String?   // JSON string for additional data (e.g., cardId, statementId)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

